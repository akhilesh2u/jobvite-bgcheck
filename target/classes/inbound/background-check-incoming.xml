<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">

    <flow name="post:/tempworks/order:application/xml:tempworks-bgcheck-config">
        <flow-ref name="background-check-incoming-processing" doc:name="background-check-incoming-processing"/>
    </flow>

    <sub-flow name="background-check-incoming-processing" >
        <set-variable variableName="requestTimeStamp" value="#[server.nanoTime()]" doc:name="Inbound Request Timestamp"/>
        <set-variable variableName="requestorJson" value="#[message.inboundProperties.requestor]" mimeType="application/json" doc:name="Set Requestor from Header"/>
        <dw:transform-message doc:name="Transform Requestor Header to Object">
            <dw:set-variable variableName="requestorHeaderJson"><![CDATA[%dw 1.0
%output application/java
---
flowVars.requestorJson]]></dw:set-variable>
        </dw:transform-message>
		<logger message="ReqCorrelationId=  SessionCorrelationId= FlowName=#[flow.Name] NumberOfHeaders=#[message.inboundProperties.size()] PayloadStringSize=#[message.payload != null ? message.payloadAs(java.lang.String) : 0] URILength=#[message.inboundProperties['http.request.uri']] Message='Request passed apiKitvalidation and entered flow'"
		        level="INFO" category="com.deverus.tempbgchk.info.httpin" doc:name="INFO Logger for transaction tracking"/>	
		<logger message="ReqCorrelationId=  SessionCorrelationId= FlowName=#[flow.Name] HTTPMethod=#[message.inboundProperties.'http.method'] RequestUri=#[mesage.inboundProperties['http.request.uri']] FlowVars=#[flowVars] Payload=#[payload] Message='Request passed apiKitvalidation and entered flow'"
		        level="DEBUG" category="com.deverus.tempbgchk.debug.request.httpin" doc:name="DEBUG Logger for daignostics"/>
        <dw:transform-message doc:name="Transform Tempworks format to Verocity" metadata:id="b35aa25e-19ac-47dc-9406-1e06b9e5765b">
            <dw:input-payload mimeType="application/xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var reportRecipient = payload.BackgroundCheck.BackgroundSearchPackage.Screenings.*AdditionalItems filter ($.@qualifier == "reportRecipient" and $.@type == "OriginatorInfo")
%var locationDescription = payload.BackgroundCheck.BackgroundSearchPackage.Screenings.*AdditionalItems filter ($.@qualifier == "locationDescription" and $.@type == "OriginatorInfo")
%var locationCode = payload.BackgroundCheck.BackgroundSearchPackage.Screenings.*AdditionalItems filter ($.@qualifier == "locationCode" and $.@type == "OriginatorInfo")
%var transactId = payload.BackgroundCheck.BackgroundSearchPackage.Screenings.*AdditionalItems filter ($.@qualifier == "transactId" and $.@type == "OriginatorInfo")
%var consentToBackgroundCheck = payload.BackgroundCheck.BackgroundSearchPackage.Screenings.*AdditionalItems filter ($.@qualifier == "consentToBackgroundCheck" and $.@type == "OriginatorInfo")

---
{
	webhookURL: reportRecipient.Text[0],
	package: {
		packageId: payload.BackgroundCheck.BackgroundSearchPackage.Screenings.PackageId.IdValue
	},
	location: {
		 locationName:locationDescription.Text[0],
		 locationId:locationCode.Text[0]
	},
	applicant: {
		 refId: transactId.Text[0],
		 consent:consentToBackgroundCheck.Text[0],
		basicInformation: {
			firstName: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PersonName.GivenName,
			middleName: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PersonName.MiddleName,
			(ssn: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.DemographicDetail.GovernmentId) when payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.DemographicDetail.GovernmentId.@countryCode == 'US' and  payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.DemographicDetail.GovernmentId.@issuingAuthority == 'SSN',
			phoneNumber: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.ContactMethod.Telephone.FormattedNumber,
			(lastName: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PersonName.FamilyName) when payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PersonName.FamilyName.@primary == 'true',
			email: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.ContactMethod.InternetEmailAddress,
			dob: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.DemographicDetail.DateOfBirth
		},
		address: {
			addressLine1: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PostalAddress.DeliveryAddress.AddressLine,
			city: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PostalAddress.Municipality,
			state: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PostalAddress.Region,
			zipCode: payload.BackgroundCheck.BackgroundSearchPackage.PersonalData.PostalAddress.PostalCode
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="invoke_verocity_API" path="${verosity.api.path}" method="POST" doc:name="Invoke Verocity BackgroundCheck API">
            <http:request-builder>
                <http:header headerName="Content-Type" value="application/json"/>
<!--                 <http:header headerName="Authorization" value="#[message.inboundProperties['authorization']]"/>
                 <http:header headerName="apiSecretKey" value="#[flowVars.requestorHeaderJson.apiSecretKey]"/>
 -->
 			<http:header headerName="Authorization" value="Bearer #[flowVars.requestorHeaderJson.apiSecretKey]"/>
             </http:request-builder>
        </http:request>
        <json:json-to-xml-transformer mimeType="application/xml" doc:name="JSON to XML"/>
        
<!--         <http:request config-ref="invoke_resetContentType_API" path="testresponse" method="POST" doc:name="Invoke Reset Content Type API">
            <http:request-builder>
                <http:header headerName="Content-Type" value="application/xml"/>
         </http:request-builder>
		</http:request>
 -->        <!-- <parse-template location="C:\Deverus\tempworks-bgcheck\src\main\api\schemas\inboundResponseFormat.xml" doc:name="Parse Template" mimeType="text/xml"/> -->
        
        
        <!-- <set-property propertyName="content-type" doc:name="Property" mimeType="text/xml" value="text/xml; charset=windows-1252"/> -->
		<!-- <message-properties-transformer name="contentTypeTextXML" doc:name="Message Properties"  overwrite="true" mimeType="text/xml">
		   <add-message-property key="Content-Type" value="text/xml" />
		</message-properties-transformer> -->

        <set-variable variableName="responseTimeStamp" value="#[server.nanoTime()]" doc:name="Outbound Respons Timestamp"/>	
		<logger message="ReqCorrelationId=  SessionCorrelationId= FlowName=#[flow.Name] ProcessingTimeStamp=#[(flowVars.requestTimeStamp - flowVars.responseTimeStamp)/1000000] HttpStatusCode= #[message.outboundProperties['http.status']] NumberOfHeaders=#[message.inboundProperties.size()] PayloadStringSize=#[message.payload != null ? message.payloadAs(java.lang.String) : 0]  Total Message='Transformed response going out of flow'"
		        level="INFO" category="com.deverus.tempbgchk.info.response.success" doc:name="INFO Logger for transaction tracking"/>	
		<logger message="ReqCorrelationId=  SessionCorrelationId= FlowName=#[flow.Name] ProcessingTimeStamp=#[(flowVars.requestTimeStamp - flowVars.responseTimeStamp)/1000000] HttpStatusCode= #[message.outboundProperties['http.status']] HTTPMethod=#[message.inboundProperties.'http.method']  FlowVars=#[flowVars] Payload=#[payload] Message='Transformed response going out of flow'"
		        level="DEBUG" category="com.deverus.tempbgchk.debug.response.success" doc:name="DEBUG Logger for daignostics"/>
    
    </sub-flow>
</mule>
